name: CI

on:
  push:
  pull_request:
  release:
    types: [released]

defaults:
  run:
    shell: pwsh

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        persist-credentials: false
    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: '3.10'
    - name: Setup coxbuild
      run: pip install coxbuild
    - name: Build
      run: |
        coxbuild build:web
        coxbuild build:package
        coxbuild installBuilt
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package
        path: ./dist
    - name: Prepare
      run: |
        mkdir cache
        python -u -m aexpy initialize
    - name: Test Extraction
      continue-on-error: true
      run: python -u -m aexpy -vvv extract click@8.1.3
    - name: Test Report 1
      continue-on-error: true
      run: python -u -m aexpy -vvv report jinja2@3.1.1:3.1.2
    - name: Test Report 2
      run: python -u -m aexpy -vvv report coxbuild@0.1.5:0.1.6
    - name: Upload results
      uses: actions/upload-artifact@v3
      with:
        name: package-cache
        path: ./cache
  image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        persist-credentials: false
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        architecture: 'x64'
    - name: Setup coxbuild
      run: pip install coxbuild
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build
      run: |
        docker build -t aexpy/aexpy .
        mkdir cache
        docker run aexpy/aexpy --help
    - name: Test Extraction
      run: docker run -v ${{ github.workspace }}/cache:/data aexpy/aexpy -vvv extract click@8.1.3
    - name: Test Report 1
      run: docker run -v ${{ github.workspace }}/cache:/data aexpy/aexpy -vvv report jinja2@3.1.1:3.1.2
    - name: Test Report 2
      run: docker run -v ${{ github.workspace }}/cache:/data aexpy/aexpy -vvv report coxbuild@0.1.5:0.1.6
    - name: Upload results
      uses: actions/upload-artifact@v3
      with:
        name: image-cache
        path: ./cache
  docs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        persist-credentials: false
    - uses: actions/setup-python@v4
      with:
        python-version: '3.7'
        architecture: 'x64'
    - name: Setup paperead
      run: pip install paperead
    - name: Generate documents
      run: |
        cd docs
        paperead build
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docs
        path: ./docs/dist
  deploy:
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'release' }}
    needs: [image, docs, package]
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: docs
        path: ./docs/dist
    - name: Deploy docs to netlify
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: netlify/actions/cli@master
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      with:
        args: deploy --dir=./docs/dist --prod
        secrets: '["NETLIFY_AUTH_TOKEN", "NETLIFY_SITE_ID"]'
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package
        path: ./dist
    - name: Deploy packages
      if: ${{ github.event_name == 'release' }}
      env:
        PYTHONUTF8: 1
        TWINE_USERNAME: '__token__'
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python -m pip install --upgrade build twine
        python -m twine upload --skip-existing --repository pypi "dist/*"
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Image Metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: stardustdl/aexpy
    - name: Deploy image
      uses: docker/build-push-action@v3
      with:
        push: ${{ github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}